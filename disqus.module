<?php

/**
 * @file
 * The Disqus Drupal module.
 */

/**
 * API No action on node delete.
 */
define('DISQUS_API_NO_ACTION', 0);

/**
 * API Close on node delete.
 */
define('DISQUS_API_CLOSE', 1);

/**
 * API Remove on node delete.
 */
define('DISQUS_API_REMOVE', 2);

/**
 * Implements hook_help().
 */
function disqus_help($path, $arg) {
  switch ($path) {
  case 'help.page.disqus':
    $output = '<p>'. t('Uses the <a href="@disqus">Disqus</a> comment system to enhance comments.', array('@disqus' => 'http://disqus.com')) .'</p>';
    $output.= '<h3>'. t('Installation') .'</h3>';
    $output.= '<ol><li>'. t('Register your site information at <a href="http://disqus.com">Disqus</a>') .'</li>';
    $output.= '<li>'. t('In the <a href="@configuration">Disqus configuration</a>, set the domain to what you registered with Disqus, and what node types you would like to have comments', array('@configuration' => url('admin/config/services/disqus'))) .'</li>';
    $output.= '<li>'. t('Visit the <a href="@permissions">permissions</a>, and set which users you would like to have the ability to view Disqus threads (recommended for role)', array('@permissions' => url('admin/people/permissions', array('fragment' => 'module-disqus')))) .'</li></ol>';
    return $output;
  case 'system.admin_config_services.disqus':
    return '<p>'. t('The following provides the general configuration options for the <a href="@disqus">Disqus</a> comment web service.', array('@disqus' => 'http://disqus.com')) .'</p>';
  }
}

/**
 * Implements hook_permission().
 */
function disqus_permission() {
  return array(
    'administer disqus' => array(
      'title' => t('Administer Disqus'),
      'description' => t('Perform administrative actions with Disqus.'),
    ),
    'view disqus comments' => array(
      'title' => t('View Disqus comments'),
      'description' => t('Allows access to view Disqus comments.')
    ),
    'display disqus comments on profile' => array(
      'title' => t('Disqus comments in profile'),
      'description' => t('When enabled, will display Disqus comments on the profiles of users belonging to this role.'),
    ),
    'toggle disqus comments' => array(
      'title' => t('Toggle Disqus comments'),
      'description' => t('When enabled, will allow users to toggle comments on and off on nodes.'),
    ),
  );
}

/**
 * Implements hook_element_info().
 */
function disqus_element_info() {
  $types['disqus'] = array(
    '#disqus' => array(),
    '#theme_wrappers' => array('disqus_noscript', 'container'),
    '#attributes' => array('id' => 'disqus_thread'),
  );
  return $types;
}

/**
 * Post render function of the Disqus element to inject the Disqus JavaScript.
 */
function disqus_element_post_render_cache(array $element, array $context) {
  // Construct the settings to be passed in for Disqus.
  $entity = $context['entity'];
  $disqus = array(
    'domain' => \Drupal::config('disqus.settings')->get('disqus_domain'),
    'url' => $entity->url(),
    'title' => $entity->label(),
    'identifier' => "{$entity->getEntityTypeId()}/{$entity->id()}",
  );

  $disqus['developer'] = \Drupal::config('disqus.settings')->get('behavior.disqus_developer');

  // If the user is logged in, we can inject the username and email for Disqus.
  $account = \Drupal::currentUser();

  if (\Drupal::config('disqus.settings')->get('behavior.disqus_inherit_login') && !$account->isAnonymous()) {
    $disqus['name'] = $account->getUsername();
    $disqus['email'] = $account->getEmail();
  }

  // Provide alternate language support if desired.
  if (\Drupal::config('disqus.settings')->get('behavior.disqus_localization')) {
    $language = \Drupal::languageManager()->getCurrentLanguage();
    $disqus['language'] = $language->id;
  }

  // Check if we are to provide Single Sign-On access.
  if (\Drupal::config('disqus.settings')->get('advanced.sso.disqus_sso')) {
    $disqus += disqus_sso_disqus_settings($account);
  }

  /**
   * Pass callbacks on if needed. Callbacks array is two dimensional array
   * with callback type as key on first level and array of JS callbacks on the
   * second level.
   *
   * Example:
   * @code
   * $element['#disqus']['callbacks'] = array(
   *   'onNewComment' => array(
   *     'myCallbackThatFiresOnCommentPost',
   *     'Drupal.mymodule.anotherCallbInsideDrupalObj',
   *   ),
   * );
   * @endcode
   */
  if (!empty($element['#disqus']['callbacks'])) {
    $disqus['callbacks'] = $element['#disqus']['callbacks'];
  }
drupal_set_message(var_dump($disqus));
  // Add the disqus.js and all the settings to process the JavaScript and load Disqus.
  $element['#attached']['js'][] = drupal_get_path('module', 'disqus') . '/disqus.js';
  $element['#attached']['js'][] = array(
    'type' => 'setting',
    'data' => array(
      'disqus' => $disqus,
    ),
  );
  return $element;
}

/**
 * Implements hook_node_links_alter().
 */
function disqus_node_links_alter(array &$node_links, \Drupal\node\NodeInterface $node, array &$context) {
  $fields = \Drupal::service('disqus.manager')->getFields('node');
  foreach ($fields as $field_name => $detail) {
    //Skip fields that the node does not have.
    if(!$node->hasField($field_name)) {
      continue;
    }
    $links = array();
    if ($node->get($field_name)->status) {
      if (\Drupal::currentUser()->hasPermission('view disqus comments')) {
        if ($context['view_mode'] === 'teaser') {
            // Display the Disqus link.
            $links['disqus_comments_num'] = array(
              'title' => t('Comments'),
              'href' => $node->url(),
              'fragment' => 'disqus_thread',
              'attributes' => array(
                // Identify the node for Disqus with the unique identifier:
                // http://docs.disqus.com/developers/universal/#comment-count
                'data-disqus-identifier' => 'node/' . $node->id(),
              ),
            );
        }
        $node_links['disqus'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#attributes' => array(
            'class' => array('links', 'inline'),
          ),
        );

        // Attach disqus.js to load the Disqus comment count JavaScript.
        $node_links['disqus']['#attached']['js'][] = drupal_get_path('module', 'disqus') . '/disqus.js';
        $node_links['disqus']['#attached']['js'][] = array(
          'data' => array('disqusComments' => \Drupal::config('disqus.settings')->get('disqus_domain')),
          'type' => 'setting',
        );
      }
    }
  }
}

/**
 * Implements hook_node_delete().
 */
function disqus_node_delete($node) {
  db_delete('disqus')->condition('nid', $node->id())->execute();

  // Close/remove the thread on disqus if required.
  $action = \Drupal::config('disqus.settings')->get('advanced.api.disqus_api_delete');
  if ($action != DISQUS_API_NO_ACTION) {
    $disqus = disqus_api();
    if ($disqus) {
      try {
        // Load the thread data from disqus. Passing thread is required to allow the thread:ident call to work correctly. There is a pull request to fix this issue.
        $thread = $disqus->threads->details(array('forum' => $node->disqus['domain'], 'thread:ident' => $node->disqus['identifier'], 'thread' => '1', 'version' => '3.0'));
      }
      catch (Exception $exception) {
        drupal_set_message(t('There was an error loading the thread details from Disqus.'), 'error');
        watchdog('disqus', 'Error loading thread details for node @nid. Check your API keys.', array('@nid' => $node->id()), WATCHDOG_ERROR, 'admin/config/services/disqus');
      }
      if (isset($thread->id)) {
        if ($action == DISQUS_API_CLOSE) {
          try {
            $disqus->threads->close(array('access_token' => \Drupal::config('disqus.settings')->get('advanced.disqus_useraccesstoken'), 'thread' => $thread->id, 'forum' => $node->disqus['domain'], 'version' => '3.0'));
          }
          catch (Exception $exception) {
            drupal_set_message(t('There was an error closing the thread on Disqus.'), 'error');
            watchdog('disqus', 'Error closing thread for node @nid. Check your user access token.', array('@nid' => $node->id()), WATCHDOG_ERROR, 'admin/config/services/disqus');
          }
        }
        if ($action == DISQUS_API_REMOVE) {
          try {
            $disqus->threads->remove(array('access_token' => \Drupal::config('disqus.settings')->get('advanced.disqus_useraccesstoken'), 'thread' => $thread->id, 'forum' => $node->disqus['domain'], 'version' => '3.0'));
          }
          catch (Exception $exception) {
            drupal_set_message(t('There was an error removing the thread on Disqus.'), 'error');
            watchdog('disqus', 'Error removing thread for node @nid. Check your user access token.', array('@nid' => $node->id()), WATCHDOG_ERROR, 'admin/config/services/disqus');
          }
        }
      }
    }
  }
}

/**
 * Implements hook_node_insert().
 */
function disqus_node_insert($node) {
  // Write the value only if it's disabled (default is enabled).
  if (isset($node->disqus_status) && $node->disqus_status == FALSE) {
    $data = array(
      'nid' => $node->id(),
      'status' => $node->disqus_status,
    );
    drupal_write_record('disqus', $data);
  }
}

/**
 * Implements hook_node_update().
 */
function disqus_node_update($node) {
  // Update the thread information on disqus if required.
  if (\Drupal::config('disqus.settings')->get('advanced.api.disqus_api_update') && ($node->disqus['title'] != $node->original->disqus['title'] || $node->disqus['url'] != $node->original->disqus['url'])) {
    $disqus = disqus_api();
    if ($disqus) {
      try {
        // Load the thread data from disqus. Passing thread is required to allow the thread:ident call to work correctly. There is a pull request to fix this issue.
        $thread = $disqus->threads->details(array('forum' => $node->disqus['domain'], 'thread:ident' => $node->disqus['identifier'], 'thread' => '1', 'version' => '3.0'));
      }
      catch (Exception $exception) {
        drupal_set_message(t('There was an error loading the thread details from Disqus.'), 'error');
        watchdog('disqus', 'Error loading thread details for node @nid. Check your API keys.', array('@nid' => $node->id()), WATCHDOG_ERROR, 'admin/config/services/disqus');
      }
      if (isset($thread->id)) {
        try {
          $disqus->threads->update(array('access_token' => \Drupal::config('disqus.settings')->get('advanced.disqus_useraccesstoken'), 'thread' => $thread->id, 'forum' => $node->disqus['domain'], 'title' => $node->disqus['title'], 'url' => $node->disqus['url'], 'version' => '3.0'));
        }
        catch (Exception $exception) {
          drupal_set_message(t('There was an error updating the thread details on Disqus.'), 'error');
          watchdog('disqus', 'Error updating thread details for node @nid. Check your user access token.', array('@nid' => $node->id()), WATCHDOG_ERROR, 'admin/config/services/disqus');
        }
      }
    }
  }

  // Finish the update process.
  if (isset($node->disqus_status) && isset($node->disqus['status']) && $node->disqus_status != $node->disqus['status']) {
    if ($node->disqus_status) {
      disqus_node_delete($node);
    }
    else {
      disqus_node_insert($node);
    }
  }
}

/**
 * Implements hook_views_data_alter().
 */
function disqus_views_data_alter(&$data) {
  // Number of Disqus comments made on the given node.
  $data['node']['disqus_comment_count']['field'] = array(
    'title' => t('Disqus Comment Count'),
    'group' => t('Content'),
    'help' => t('The number of Disqus comments made on the post. Note that this will not work in the preview.'),
    'id' => 'disqus_comment_count',
  );
}

/**
 * Implements hook_theme().
 */
function disqus_theme() {
  return array(
    'disqus_noscript' => array(
      'variables' => array('disqus' => NULL),
    ),
  );
}

/**
 * Prepares the noscript tag which is used when JavaScript is not available.
 *
 * @param $variables
 *   An array containing a "disqus" array, containing the following items:
 *     - "domain": The domain associated with this Disqus account.
 *     - "title": The title of the thread.
 *     - "developer": Whether or not testing is enabled.
 *     - "url": The disqus_url variable (http://disqus.com/docs/help/#faq-16).
 */
function theme_disqus_noscript($variables = array()) {
  $disqus = $variables['disqus'];
  
  $return = array(
    '#markup' => '<noscript><p>' . l(t('View the discussion thread.'), 'http://' . $disqus['domain'] . '.disqus.com/?url=' . urlencode($disqus['url'])) . '</p></noscript>',
    '#attached' => array(
      'js' => array(
        drupal_get_path('module', 'disqus') . '/disqus.js',
        array('type' => 'setting', 'data' => array('disqus' => $disqus))
      )
    )
  );

  return drupal_render($return);
}

/**
 * Creates an instance of the Disqus PHP API.
 *
 * @return
 *   The instance of the Disqus API.
 */
function disqus_api() {
  if (\Drupal::moduleHandler()->moduleExists('libraries') && ($library = libraries_load('disqusapi')) && !empty($library['loaded'])) {
    try {
      $disqus = new DisqusAPI(\Drupal::config('disqus.settings')->get('advanced.disqus_secretkey'));
    }
    catch (Exception $exception) {
      drupal_set_message(t('There was an error loading the Disqus PHP API. Please check your API keys and try again.'), 'error');
      watchdog('disqus', 'Error loading the Disqus PHP API. Check your API keys.', array(), WATCHDOG_ERROR, 'admin/config/services/disqus');
      return FALSE;
    }
    return $disqus;
  }
  return FALSE;
}

/**
 * Creates an instance of the Disqus PHP API.
 *
 * @param $user_api_key
 *   The User API Key.
 * @param $forum_api_key
 *   The Forum API key.
 *
 * @return
 *   The instance of the Disqus API.
 */
function disqus($user_api_key = NULL, $forum_api_key = NULL) {
  module_load_include('php', 'disqus', 'disqus');
  return new \Drupal\disqus\Disqus($user_api_key, $forum_api_key);
}

/**
 * Implementation of hook_views_api().
 */
function disqus_views_api() {
  return array('api' => 3);
}

/**
 * Computes the full settings associated with Disqus SSO.
 *
 * These need to be merged into the settings for basic Disqus integration for
 * actual usage.
 *
 * @param object|null $account
 *
 * @return array
 */
function disqus_sso_disqus_settings($account = NULL) {
  if (!isset($account)) {
    $account = \Drupal::currentUser();
  }

  $disqus['sso'] = array(
    'name' => \Drupal::config('system.site')->get('name'),
    // The login window must be closed once the user logs in.
    'url' => url('user/login', array('query' => array('destination' => 'disqus/closewindow'))),
    // The logout link must redirect back to the original page.
    'logout' => url('user/logout', array('query' => array('destination' => current_path()))),
    'width' => 800,
    'height' => 600,
  );

  $managed_logo = \Drupal::config('disqus.settings')->get('advanced.sso.disqus_logo');
  $use_site_logo = \Drupal::config('disqus.settings')->get('advanced.sso.disqus_use_site_logo');
  if (!$use_site_logo && $managed_logo !== FALSE) {
    $disqus['sso']['button'] = file_create_url(file_load($managed_logo['0'])->getFileUri());
  }
  elseif ($logo = theme_get_setting('logo')) {
    $disqus['sso']['button'] = $logo['url'];
  }
  else {
    $disqus['sso']['button'] = url('misc/druplicon.png', array('absolute' => TRUE));
  }
  if ($favicon = theme_get_setting('favicon')) {
    $disqus['sso']['icon'] = $favicon['url'];
  }

  // Stick the authentication requirements and data in the settings.
  $disqus['api_key'] = \Drupal::config('disqus.settings')->get('advanced.disqus_publickey');
  $disqus['remote_auth_s3'] = disqus_sso_key_encode(disqus_sso_user_data($account));

  return $disqus;
}

/**
 * Assembles the full private key for use in SSO authentication.
 *
 * @param array $data
 *
 * @return string
 */
function disqus_sso_key_encode($data) {
  // Encode the data to be sent off to Disqus.
  $message = base64_encode(json_encode($data));
  $timestamp = time();
  $hmac = hash_hmac('sha1', "$message $timestamp", \Drupal::config('disqus.settings')->get('advanced.disqus_secretkey'));

  return "$message $hmac $timestamp";
}

/**
 * Assembles user-specific data used by Disqus SSO.
 *
 * @param object|null $account
 *
 * @return array
 */
function disqus_sso_user_data($account = NULL) {
  if (!isset($account)) {
    $account = \Drupal::currentUser();
  }

  $data = array();
  if (!$account->isAnonymous()) {
    $data['id'] = $account->id();
    $data['username'] = $account->getUsername();
    $data['email'] = $account->getEmail();
    $data['url'] = url('user/' . $account->id(), array('absolute' => TRUE));

    // Load the user's avatar.
    $user_picture_default = \Drupal::config('field.instance.user.user.user_picture')->get('user_picture_default');

    $user = user_load($account->id());
    if (isset($user->user_picture->target_id) && !empty($user->user_picture->target_id) && $file = file_load($user->user_picture->target_id)) {
      $data['avatar'] = !empty($file->getFileUri()) ? $file->getFileUri() : NULL;
    }
    elseif (!empty($user_picture_default)) {
      $data['avatar'] = $user_picture_default;
    }
    if (isset($data['avatar'])) {
      $data['avatar'] = file_create_url($data['avatar']);
    }
  }
  drupal_alter('disqus_user_data', $data);

  return $data;
}
