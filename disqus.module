<?php
// $Id$

/**
 * Implement hook_help().
 */
function disqus_help($path, $arg) {
  switch ($path) {
  case 'admin/help#disqus':
    $output = '<p>'. t('Uses the <a href="@disqus">Disqus</a> comment system to enhance comments.', array('@disqus' => 'http://disqus.com')) .'</p>';
    $output.= '<h3>'. t('Installation') .'</h3>';
    $output.= '<ol><li>'. t('Register your site information at <a href="http://disqus.com">Disqus</a>') .'</li>';
    $output.= '<li>'. t('In the <a href="@configuration">Disqus configuration</a>, set the domain to what you registered with Disqus, and what node types you would like to have comments', array('@configuration' => url('admin/settings/disqus'))) .'</li>';
    $output.= '<li>'. t('Visit the <a href="@permissions">permissions</a>, and set which users you would like to have the ability to view Disqus threads (recommended for role)', array('@permissions' => url('admin/user/permissions', array('fragment' => 'module-disqus')))) .'</li></ol>';
    return $output;
  case 'admin/config/system/disqus':
    return '<p>'. t('The following provides the general configuration options for the <a href="@disqus">Disqus</a> comment web service.', array('@disqus' => 'http://disqus.com')) .'</p>';
  }
}

/**
 * Implement hook_permission().
 */
function disqus_permission() {
  return array(
    'administer disqus' => array(
      'title' => t('Administer Disqus'),
      'description' => t('Perform administrative actions with Disqus.'),
    ),
    'view disqus comments' => array(
      'title' => t('View Disqus comments'),
      'description' => t('Allows access to view Disqus comments.')
    ),
    'display disqus comments on profile' => array(
      'title' => t('Disqus comments in profile'),
      'description' => t('When enabled, will display Disqus comments on the profiles of users belonging to this role.'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function disqus_menu() {
  $items = array();
  $items['admin/config/system/disqus'] = array(
    'title' => 'Disqus',
    'description' => 'Provides configuration options for the Disqus comment system.',
    'access arguments' => array('administer disqus'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('disqus_admin_settings'),
    'file' => 'disqus.admin.inc',
  );
  return $items;
}

/**
 * Implements hook_node_load().
 */
function disqus_node_load(&$nodes, $types) {
  // Make sure we only load Disqus on nodes of the desired types.
  $disqustypes = variable_get('disqus_nodetypes', array());

  // Check which Disqus domain to use.
  $domain = variable_get('disqus_domain', '');
  if (!empty($domain)) {
    // Load Disqus into the nodes.
    foreach ($nodes as &$node) {
      if (!empty($disqustypes[$node->type])) {
        // Save the data to the node object.
        $node->disqus = array('domain' => $domain);

        // Build the absolute URL without the alias for the disqus_url flag.
        $node->disqus['url'] = url("node/$node->nid", array(
          'alias' => TRUE,
          'absolute' => TRUE,
        ));

        // Build the message excerpt.
        $message = nl2br(''); // @TODO: Pass in the teaser.
        $message = str_replace("\r", ' ', $message);
        $message = str_replace("\n", ' ', $message);
        $message = strip_tags($message);
        $node->disqus['message'] = check_plain($message);

        // Build the title.
        $node->disqus['title'] = check_plain($node->title);

        // Provide the identifier.
        $node->disqus['identifier'] = 'node/' . $node->nid;

        // The developer flag must always be set when the node is unpublished.
        if ($node->status == 0) {
          $node->disqus['developer'] = 1;
        }
        elseif ($developer = variable_get('disqus_developer', FALSE)) {
          $node->disqus['developer'] = intval($developer);
        }
      }
    }
  }
}

/**
 * Implements hook_node_view().
 */
function disqus_node_view($node, $view_mode) {
  if (isset($node->disqus) && user_access('view disqus comments')) {
    switch ($view_mode) {
      case 'full':
        if (variable_get('disqus_location', 'content_area') == 'content_area') {
          // Inject the comments into the node content area.
          $node->content['disqus'] = array(
            '#theme' => 'disqus_comments',
            '#disqus' => $node->disqus,
            '#weight' => variable_get('disqus_weight', 50),
          );
        }
        break;
      case 'teaser':
        // Display the Disqus link.
        $links['disqus_comments_num'] = array(
          'title' => t('Comments'),
          'href' => 'node/' . $node->nid,
          'fragment' => 'disqus_thread',
        );
        $node->content['links']['disqus'] = array(
          '#theme' => 'links',
          '#links' => $links,
          '#attributes' => array('class' => array('links', 'inline')),
        );
        static $added = FALSE;
        if ($added == FALSE) {
          drupal_add_js(array(
            'disqusCommentDomain' => $node->disqus['domain'],
          ), 'setting');
          $added = TRUE;
        }
        $js = drupal_get_path('module', 'disqus') . '/disqus.js';
        $node->content['links']['disqus']['#attached']['js'][$js] = array();
        break;
    }
  }
}

/**
 * Implements hook_user_load().
 */
function disqus_user_load(&$users) {
  // Check which Disqus domain to use.
  $domain = variable_get('disqus_domain', '');
  if (!empty($domain)) {
    foreach ($users as &$account) {
      // Only show on the profile if desired. Don't show on the administrator's profile.
      if (user_access('display disqus comments on profile', $account) && $account->uid != 1) {
        // Save the data to the user object.
        $account->disqus = array('domain' => $domain);

        // Build the absolute URL without the alias for the disqus_url flag.
        $account->disqus['url'] = url("user/$account->uid", array(
          'alias' => TRUE,
          'absolute' => TRUE,
        ));

        // Build the message excerpt.
        $account->disqus['message'] = check_plain($account->name);

        // Build the title.
        $account->disqus['title'] = check_plain($account->name);

        // Provide the identifier.
        $account->disqus['identifier'] = 'user/' . $account->uid;

        // Inject the script.
        if ($developer = variable_get('disqus_developer', FALSE)) {
          $account->disqus['developer'] = $developer;
        }
      }
    }
  }
}

/**
 * Implements hook_user().
 */
function disqus_user_view(&$account, $view_mode) {
  if (isset($account->disqus)) {
    if ($view_mode == 'full' && user_access('view disqus comments') && variable_get('disqus_location', 'content_area') == 'content_area') {
      $account->content['disqus'] = array(
        '#theme' => 'disqus_comments',
        '#disqus' => $account->disqus,
        '#weight' => variable_get('disqus_weight', 50),
      );
    }
  }
}

/**
 * Implements hook_block_info().
 */
function disqus_block_info() {
  $blocks['disqus_recent_comments'] = array(
    'info' => t('Disqus: Recent Comments'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['disqus_popular_threads'] = array(
    'info' => t('Disqus: Popular Threads'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['disqus_top_commenters'] = array(
    'info' => t('Disqus: Top Commenters'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['disqus_combination_widget'] = array(
    'info' => t('Disqus: Combination Widget'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  $blocks['disqus_comments'] = array(
    'info' => t('Disqus: Comments'),
    'cache' => DRUPAL_NO_CACHE,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function disqus_block_configure($delta = '') {
  $form = array();
  $form[$delta .'_items'] = array(
    '#type' => 'select',
    '#title' => t('Number of items to show'),
    '#options' => array(1 => 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20),
    '#default_value' => variable_get($delta .'_items', 5),
    '#access' => ($delta != 'disqus_comments'),
  );
  $form[$delta .'_showavatars'] = array(
    '#type' => 'select',
    '#title' => t('Show avatars'),
    '#options' => array(FALSE => t('No'), TRUE => t('Yes')),
    '#default_value' => variable_get($delta .'_showavatars', TRUE),
    '#access' => ($delta == 'disqus_recent_comments') || ($delta == 'disqus_top_commenters'),
  );
  $form[$delta .'_avatarsize'] = array(
    '#type' => 'select',
    '#title' => t('Avatar size'),
    '#options' => array(
      24 => t('X-Small (24px)'),
      32 => t('Small (32px)'),
      48 => t('Medium (48px)'),
      92 => t('Large (92px)'),
      128 => t('X-Large (128px)'),
    ),
    '#default_value' => variable_get($delta .'_avatarsize', 32),
    '#access' => $form[$delta .'_showavatars']['#access'],
  );
  $form[$delta .'_colortheme'] = array(
    '#type' => 'select',
    '#title' => t('Color Theme'),
    '#options' => array(
      'blue' => t('Blue'),
      'grey' => t('Grey'),
      'green' => t('Green'),
      'red' => t('Red'),
      'orange' => t('Orange'),
    ),
    '#default_value' => variable_get($delta .'_colortheme', 'blue'),
    '#access' => $delta == 'disqus_combination_widget',
  );
  $form[$delta .'_defaulttabview'] = array(
    '#type' => 'select',
    '#title' => t('Default Tab View'),
    '#options' => array(
      'people' => t('People'),
      'recent' => t('Recent'),
      'popular' => t('Popular'),
    ),
    '#default_value' => variable_get($delta .'_defaulttabview', 'people'),
    '#access' => $delta == 'disqus_combination_widget',
  );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function disqus_block_save($delta = '', $edit = array()) {
  if ($delta != 'disqus_comments') {
    variable_set($delta .'_items', $edit[$delta .'_items']);
    variable_set($delta .'_showavatars', $edit[$delta .'_showavatars']);
    variable_set($delta .'_avatarsize', $edit[$delta .'_avatarsize']);
    variable_set($delta .'_colortheme', $edit[$delta .'_colortheme']);
    variable_set($delta .'_defaulttabview', $edit[$delta .'_defaulttabview']);
  }
}

/**
 * Implements hook_block_view().
 */
function disqus_block_view($delta = '') {
  $num_items = variable_get($delta .'_items', 5);
  $avatars = variable_get($delta .'_showavatars', TRUE) ? '&avatar_size='. variable_get($delta .'_avatarsize', 32) : '&amp;hide_avatars=1';
  $color = variable_get($delta .'_colortheme', 'blue');
  $default_tab = variable_get($delta .'_defaulttabview', 'people');
  $domain = variable_get('disqus_domain', '');
  if (!empty($domain)) {
    $subject = '';
    $content = '';
    switch ($delta) {
    case 'disqus_recent_comments':
      $content = <<<EOT
<div id="dsq-recentcomments" class="dsq-widget"><script type="text/javascript" src="http://disqus.com/forums/$domain/recent_comments_widget.js?num_items=$num_items$avatars"></script></div>
EOT;
      $subject = t('Recent Comments');
    break;
    case 'disqus_popular_threads':
      $subject = t('Popular Threads');
      $content = <<<EOT
<div id="dsq-popthreads" class="dsq-widget"><script type="text/javascript" src="http://disqus.com/forums/$domain/popular_threads_widget.js?num_items=$num_items"></script></div>
EOT;
    break;
    case 'disqus_top_commenters':
      $subject = t('Top Commenters');
      $content = <<<EOT
<div id="dsq-topcommenters" class="dsq-widget"><script type="text/javascript" src="http://disqus.com/forums/$domain/top_commenters_widget.js?num_items=$num_items$avatars"></script></div>
EOT;
    break;
    case 'disqus_combination_widget':
      $subject = t('Comments');
      $content = <<<EOT
<script type="text/javascript" src="http://disqus.com/forums/$domain/combination_widget.js?num_items=$num_items&amp;color=$color&amp;default_tab=$default_tab"></script>
EOT;
    break;
    case 'disqus_comments':
      if ((variable_get('disqus_location', 'content_area') == 'block') && user_access('view disqus comments')) {
        $item = menu_get_item();
        switch ($item['path']) {
          case 'node/%':
            if ($disqus = isset($item['page_arguments'][0]->disqus) ? $item['page_arguments'][0]->disqus : FALSE) {
              $content = array(
                '#theme' => 'disqus_comments',
                '#disqus' => $disqus,
              );
            }
            break;
          case 'user/%':
            if ($disqus = isset($item['page_arguments'][0]->disqus) ? $item['page_arguments'][0]->disqus : FALSE) {
              $content = array(
                '#theme' => 'disqus_comments',
                '#disqus' => $disqus,
              );
            }
            break;
        }
      }
      break;
    }
    return array('subject' => $subject, 'content' => $content);
  }
}

/**
 * Implements hook_page_alter().
 */
function disqus_page_alter(&$page, $disqus_options = NULL) {
  static $disqus = FALSE;
  if (isset($disqus_options)) {
    $disqus = $disqus_options;
  }
  if ($disqus) {
  }
}

/**
 * Implements hook_theme().
 */
function disqus_theme() {
  return array(
    'disqus_comments' => array(
      'variables' => array('disqus' => NULL),
    ),
    'disqus_comments_num' => array(
      'variables' => array(
        'domain' => NULL,
        'path' => NULL,
      ),
    ),
  );
}

/**
 * Renders the JavaScript to display the Disqus thread for the current page.
 *
 * @param $variables
 *   An array containing a "disqus" array, containing the following items:
 *     - "domain": The domain associated with this Disqus account.
 *     - "title": The title of the thread.
 *     - "message": The teaser of the thread.
 *     - "developer": Whether or not testing is enabled.
 *     - "url": The disqus_url variable (http://disqus.com/docs/help/#faq-16).
 */
function theme_disqus_comments($variables = array()) {
  $disqus = $variables['disqus'];

  // Add the JavaScript at the bottom of the page.
  static $added = FALSE;
  if ($added == FALSE) {
    $added = TRUE;

    $domain = variable_get('disqus_domain', '');
    if (!empty($domain)) {
      $output = 'var disqus_url = '. drupal_json_encode($disqus['url']) .';';
      $output .= 'var disqus_title = '. drupal_json_encode($disqus['title']) .';';
      $output .= 'var disqus_message = '. drupal_json_encode($disqus['message']) .';';
      $output .= 'var disqus_identifier = '. drupal_json_encode($disqus['identifier']) .';';
      if (isset($disqus['developer'])) {
        $output .= 'var disqus_developer = 1;';
      }
      global $user;
      if ($user->uid > 0) {
        $output .= 'var disqus_def_name = '. drupal_json_encode($user->name) .';';
        $output .= 'var disqus_def_email = '. drupal_json_encode($user->mail) .';';
      }
      drupal_add_js($output, array(
        'type' => 'inline',
        'scope' => 'footer',
        'weight' => JS_THEME,
      ));
      drupal_add_js('http://disqus.com/forums/' . $domain . '/embed.js', array(
        'type' => 'external',
        'scope' => 'footer',
        'weight' => JS_THEME + 1,
      ));
    }
  }

  // Return the comment markup.
  return '<div id="disqus_thread"></div><noscript><a href="http://'. $disqus['domain'] .'.disqus.com/?url='. urlencode($disqus['url']) .'">'. t('View the discussion thread.') .'</a></noscript>';
}

/**
 * Creates an instance of the Disqus PHP API.
 *
 * @param $user_api_key
 *   The User API Key.
 * @param $forum_api_key
 *   The Forum API key.
 *
 * @return
 *   The instance of the Disqus API.
 */
function disqus($user_api_key = NULL, $forum_api_key = NULL) {
  module_load_include('php', 'disqus', 'disqus');
  return new Disqus($user_api_key, $forum_api_key);
}
